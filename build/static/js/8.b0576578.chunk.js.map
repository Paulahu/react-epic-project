{"version":3,"sources":["components/1.png","components/Uploader.js","components/Tips.js","pages/Homes.js"],"names":["module","exports","Dragger","Upload","Result","styled","div","Image","h1","img","Wrapper","Component","observer","useStores","ImageStore","UserStore","props","showUploadList","beforeUpload","file","setFile","setFilename","name","currentUser","message","warning","window","test","type","size","error","upLoad","then","serverFile","console","log","success","catch","EditableContext","React","createContext","EditableRow","index","Form","useForm","form","component","Provider","value","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","e","a","validateFields","values","childNode","Item","style","margin","rules","required","ref","onPressEnter","onBlur","className","paddingRight","onClick","EditableTable","row","newData","state","dataSource","findIndex","item","key","splice","setState","columns","width","render","text","filename","image","src","attributes","url","copy","height","this","components","body","cell","map","col","onCell","rowClassName","pagination","tip","spinning","isUploading","InboxOutlined","Tips","Title","Home","titleUrl"],"mappings":"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","file":"static/js/8.b0576578.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.5b78d2f9.png\";","import React, {useRef, useContext, useState, useEffect} from 'react'\nimport {useStores} from '../stores'\nimport {observer} from 'mobx-react'\nimport {Upload, Table, Input, Form, Button} from 'antd'\nimport {InboxOutlined} from '@ant-design/icons'\nimport {message, Spin} from 'antd'\nimport styled from 'styled-components'\nimport './Uploader.css'\nimport copy from 'copy-to-clipboard'\n\nconst {Dragger} = Upload\nconst Result = styled.div`\n  border: 1px dashed #ccc;\n  margin: 40px 80px 0;\n  padding: 20px;\n`\n\nconst H1 = styled.h1`\n  margin: 20px 0;\n  text-align: center;\n`\n\nconst Image = styled.img`\n  max-width: 100px;\n`\n\nconst Wrapper = styled.div`\n  box-sizing: content-box;\n  height: 150px;\n  padding: 20px;\n  margin: 40px 80px;\n  backgroundColor: transparent;\n  border: 1px dashed #fff;\n`\n\nconst Component = observer(() => {\n    const {ImageStore, UserStore} = useStores()\n\n    const props = {\n      showUploadList: false,\n      beforeUpload: file => {\n        ImageStore.setFile(file)\n        ImageStore.setFilename(file.name)\n        if (UserStore.currentUser === null) {\n          message.warning('请先登录再上传文件!')\n          return false\n        }\n\n        window.file = file\n        if (!/(svg$)|(png$)|(jpg$)|(gif$)|(jpeg$)/ig.test(file.type)) {\n          message.error('只能上传.png/.jpg/.svg/.gif/.jpeg格式的图片')\n          return false\n        }\n        if (file.size > 1024 * 1024) {\n          message.error('只能上传大小在1M以内的图片')\n          return false\n        }\n\n        ImageStore.upLoad()\n          .then((serverFile) => {\n            console.log(serverFile)\n            console.log('上传成功')\n            message.success('图片上传成功')\n          }).catch(() => {\n          console.log('上传失败')\n        })\n        return false\n      }\n    }\n\n    const EditableContext = React.createContext()\n    const EditableRow = ({index, ...props}) => {\n      const [form] = Form.useForm()\n      return (\n        <Form form={form} component={false}>\n          <EditableContext.Provider value={form}>\n            <tr {...props} />\n          </EditableContext.Provider>\n        </Form>\n      )\n    }\n    const EditableCell = ({\n                            title,\n                            editable,\n                            children,\n                            dataIndex,\n                            record,\n                            handleSave,\n                            ...restProps\n                          }) => {\n      const [editing, setEditing] = useState(false)\n      const inputRef = useRef()\n      const form = useContext(EditableContext)\n      useEffect(() => {\n        if (editing) {\n          inputRef.current.focus()\n        }\n      }, [editing])\n\n      const toggleEdit = () => {\n        setEditing(!editing)\n        form.setFieldsValue({\n          [dataIndex]: record[dataIndex],\n        })\n      }\n\n      const save = async e => {\n        try {\n          const values = await form.validateFields()\n          toggleEdit()\n          handleSave({...record, ...values})\n        } catch (errInfo) {\n          console.log('Save failed:', errInfo)\n        }\n      }\n\n      let childNode = children\n\n      if (editable) {\n        childNode = editing ? (\n          <Form.Item\n            style={{\n              margin: 0,\n            }}\n            name={dataIndex}\n            rules={[\n              {\n                required: false,\n              },\n            ]}\n          >\n            <Input ref={inputRef} onPressEnter={save} onBlur={save}/>\n          </Form.Item>\n        ) : (\n          <div\n            className=\"editable-cell-value-wrap\"\n            style={{\n              paddingRight: 24,\n            }}\n            onClick={toggleEdit}\n          >\n            {children}\n          </div>\n        )\n      }\n      return <td {...restProps}>{childNode}</td>\n    }\n\n\n    class EditableTable extends React.Component {\n      constructor(props) {\n        super(props)\n        this.columns = [\n          {\n            title: '文件名',\n            dataIndex: 'name',\n            width: '15%',\n            render: text => <a>{ImageStore.filename}</a>,\n          },\n          {\n            title: '图片预览',\n            dataIndex: 'age',\n            render: image => <Image src={ImageStore.serverFile.attributes.url.attributes.url}/>,\n          },\n          {\n            title: '最大宽度（可选）',\n            dataIndex: 'width',\n            editable: true,\n            width: '25%',\n            render: text => text ?\n              <div>{text}</div> : 0\n          },\n          {\n            title: '最大高度（可选）',\n            dataIndex: 'height',\n            editable: true,\n            width: '25%',\n            render: text => text ?\n              <div>{text}</div> : 0\n\n          },\n          {\n            title: '操作',\n            dataIndex: 'operation',\n            width: '15%',\n            render: text => <Button type={'primary'} onClick={() => copy(`${ImageStore.serverFile.attributes.url.attributes.url + '?imageView2/0' + '/w/' + this.state.dataSource[0].width + '/h/' + this.state.dataSource[0].height}`) && message.success('成功复制到剪贴板！')}>复制链接</ Button>,\n          },\n        ]\n\n\n        this.state = {\n          dataSource: [\n            {\n              key: '0',\n              width: 0,\n              height: 0,\n            }\n          ],\n        }\n      }\n\n      handleSave = row => {\n        const newData = [...this.state.dataSource]\n        const index = newData.findIndex(item => row.key === item.key)\n        const item = newData[index]\n        newData.splice(index, 1, {...item, ...row})\n        this.setState({\n          dataSource: newData,\n        })\n      }\n\n      render() {\n        const {dataSource} = this.state\n        const components = {\n          body: {\n            row: EditableRow,\n            cell: EditableCell,\n          },\n        }\n        const columns = this.columns.map(col => {\n          if (!col.editable) {\n            return col\n          }\n\n          return {\n            ...col,\n            onCell: record => ({\n              record,\n              editable: col.editable,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              handleSave: this.handleSave,\n            }),\n          }\n        })\n\n        return (\n          <div>\n            <Table\n              components={components}\n              rowClassName={() => 'editable-row'}\n              dataSource={dataSource}\n              columns={columns}\n              pagination={false}\n            />\n          </div>\n        )\n      }\n    }\n\n\n    return (\n      <>\n        <Wrapper>\n          <Spin tip=\"图片上传中...\" spinning={ImageStore.isUploading}>\n            <Dragger {...props}>\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined/>\n              </p>\n              <p className=\"ant-upload-text\">点击或拖拽上传图片</p>\n              <p className=\"ant-upload-hint\">\n                仅支持.png/.jpg/.svg/.gif/.jpeg格式的图片，图片最大1M\n              </p>\n            </Dragger>\n          </Spin>\n        </Wrapper>\n\n        {\n          ImageStore.serverFile ?\n            <Result>\n              <div>\n                <EditableTable/>\n              </div>\n            </Result>\n            : null\n        }\n      </>\n    )\n  }\n)\n\n\nexport default Component","import React from 'react'\nimport { useStores } from '../stores'\nimport { observer } from 'mobx-react'\nimport styled from 'styled-components'\n\nconst Tips = styled.div`\n  background: orange;\n  opacity: 0.8;\n  padding: 10px;\n  margin: -20px 0 30px 0;\n  color: #fff;\n  border-radius: 5px;\n`\n\nconst Component = observer(\n  ({children}) => {\n    const { UserStore } = useStores()\n    return (\n      <>\n        {\n          UserStore.currentUser ? null :\n            <Tips>{children}</Tips>\n        }\n      </>\n    )\n  }\n)\n\nexport default Component","import React from 'react'\nimport {observer} from 'mobx-react'\nimport {useStores} from '../stores'\nimport Uploader from '../components/Uploader'\nimport Tips from '../components/Tips'\nimport titleUrl from '../components/1.png'\nimport styled from 'styled-components'\n\nconst Title = styled.img`\n  margin: 70px auto;\n  display: block;\n`\n\nconst Home = observer(\n  () => {\n    const {UserStore} = useStores()\n    return (\n      <>\n        <Tips>请先登录再上传文件!</Tips>\n        <Title src={titleUrl} />\n        <Uploader />\n      </>\n    )\n  }\n)\n\nexport default Home"],"sourceRoot":""}